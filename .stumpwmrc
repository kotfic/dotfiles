;; StumpWM Init File

(cl:load "/home/kotfic/lib/dists/quicklisp/software/slime-20130217-cvs/swank-loader.lisp")
(swank-loader:init)

(in-package :stumpwm)

(define-key *top-map* (kbd "F1") "loadrc")

(setf *mouse-focus-policy* :sloppy)

(defcommand swank () ()
            (setf stumpwm:*top-level-error-action* :break)
            (swank:create-server :port 4005
                                 :style swank:*communication-style*
                                 :dont-close t)
   (echo-string (current-screen)
                "Starting swank. M-x slime-connect RET RET, then (in-package stumpwm)."))



(defcommand shell-command (command) ((:string "sh: "))
  "Run a shell command and display output to screen.
This must be used in a functional side-effects-free style! If a program does not
exit of its own accord, Stumpwm might hang!"
  (check-type command string)
  (echo-string (current-screen) (run-shell-command command t)))

(defun getx (coords)
  (parse-integer (subseq coords 0 1)))

(defun gety (coords)
  (parse-integer (subseq coords 2 3)))


(defcommand move-right () ()
  "Move to the group on the right"
  (let ((x (getx (group-name (current-group))))
        (y (gety (group-name (current-group)))))
        (run-commands (concatenate 'string "gselect " (write-to-string x) ":" (write-to-string (+ y 1))))))

(defcommand move-left () ()
  "Move to the group on the left"
  (let ((x (getx (group-name (current-group))))
        (y (gety (group-name (current-group)))))
        (run-commands (concatenate 'string "gselect " (write-to-string x) ":" (write-to-string (- y 1))))))

(defcommand move-up () ()
  "Move to the group on the left"
  (let ((x (getx (group-name (current-group))))
        (y (gety (group-name (current-group)))))
        (run-commands (concatenate 'string "gselect " (write-to-string (- x 1 )) ":" (write-to-string y)))))

(defcommand move-down () ()
  "Move to the group on the left"
  (let ((x (getx (group-name (current-group))))
        (y (gety (group-name (current-group)))))
        (run-commands (concatenate 'string "gselect " (write-to-string (+ x 1)) ":" (write-to-string y)))))

(defcommand disable-track () ()
            (run-shell-command "/home/kotfic/bin/disable-track.sh" t))

(add-hook *focus-group-hook* (lambda (curr-group prev-group) (message (group-name curr-group))))

(defcommand gen-terminal () ()
  (run-shell-command "gnome-terminal")
  (run-shell-command "/home/kotfic/bin/terminal-transparency") )

(define-key *top-map* (kbd "C-E") "exec")
;(define-key *top-map* (kbd "C-i") "exec chromium")
(define-key *top-map* (kbd "C-m") "gen-terminal")
(define-key *top-map* (kbd "C-T") "disable-track")
(define-key *top-map* (kbd "M-C-Right") "move-right")
(define-key *top-map* (kbd "M-C-Left") "move-left")
(define-key *top-map* (kbd "M-C-Up") "move-up")
(define-key *top-map* (kbd "M-C-Down") "move-down")

(when *initializing*
  (run-commands
   "grename 0:0"
   "gnewbg 0:1"
   "gnewbg 0:2"
   "gnewbg 1:0"
   "gnewbg 1:1"
   "gnewbg 1:2"
   "gnewbg 2:0"
   "gnewbg 2:1"
   "gnewbg 2:2"
   )
)


;; Select a random background image from a given folder

;; Define the background window

(defun select-random-background-image ()
  "Select a random image"
  (let ((file-list (directory "/home/kotfic/.wallpaper/*.*"))
         (*random-state* (make-random-state t)))
    (namestring (nth (random (length file-list)) file-list))))

(run-shell-command (concatenate 'string
                                "feh --bg-scale "
                                (select-random-background-image)))


(run-shell-command "compton --config ~/.compton.conf -b" )
